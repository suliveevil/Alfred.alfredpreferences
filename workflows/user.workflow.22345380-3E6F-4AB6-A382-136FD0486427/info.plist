<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.fallroot.copyurl</string>
	<key>connections</key>
	<dict>
		<key>BD0036A7-F666-46BA-9A05-CEBF20F9343C</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>45C33B5C-4EC4-4328-9A66-D2E86C40AE95</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>CK Moon &lt;fallroot@gmail.com&gt;</string>
	<key>description</key>
	<string>Copy browser's url as your own template</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Copy URL</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>escaping</key>
				<integer>16</integer>
				<key>keyword</key>
				<string>url</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>script</key>
				<string>ObjC.import('stdlib');

const NIL = $();

class Util {
    static get currentPath() {
        var currApp = Application.currentApplication();
        currApp.includeStandardAdditions = true;

        var path = $.NSString.alloc.initWithUTF8String(currApp.pathTo());

        return path.stringByDeletingLastPathComponent.js;
    }

    static escapeXML(text) {
        return text.replace(/&amp;/g, '&amp;amp;')
                   .replace(/'/g, '&amp;apos;')
                   .replace(/&lt;/g, '&amp;lt;')
                   .replace(/&gt;/g, '&amp;gt;')
                   .replace(/"/g, '&amp;quot;');
    }

    static unescapeXML(text) {
        return text.replace(/&amp;amp;/g, '&amp;')
                   .replace(/&amp;apos;/g, '\'')
                   .replace(/&amp;lt;/g, '&lt;')
                   .replace(/&amp;gt;/g, '&gt;')
                   .replace(/&amp;quot;/g, '"');
    }
}

class Browser {
    constructor(bundleId) {
        this.app = Application(bundleId);
        this.key = {
            currentTab: 'currentTab',
            title: 'title',
            url: 'url'
        };
    }

    hasWindow() {
        return this.app.running() &amp;&amp; this.app.windows.length;
    }

    get currentTab() {
        if (this.hasWindow()) {
            return this.app.windows.at(0)[this.key.currentTab]();
        } else {
            return;
        }
    }

    get currentTabInfo() {
        var tab = this.currentTab;

        if (tab) {
            return {
                title: tab[this.key.title](),
                url: tab[this.key.url]()
            };
        } else {
            return {};
        }
    }
}

class Chrome extends Browser {
    constructor() {
        super('com.google.Chrome');
        this.key.currentTab = 'activeTab';
    }
}

class Safari extends Browser {
    constructor() {
        super('com.apple.Safari');
        this.key.title = 'name';
    }
}

class Alfred {
    static get dataPath() {
        return $.getenv('alfred_workflow_data');
    }

    static generateOutput(data, templates) {
        var header = '&lt;?xml version="1.0"?&gt;&lt;items&gt;';
        var footer = '&lt;/items&gt;';
        var regExp = /\$\{([^}]+)\}/;
        var match;

        var body = templates.map(function(template) {
            var title = Util.escapeXML(template.title);
            var text = template.format;

            while (match = regExp.exec(text)) {
                text = text.replace(match[0], data[match[1]]);
            }

            text = Util.escapeXML(text);

            return `&lt;item arg="${text}"&gt;&lt;title&gt;${title}&lt;/title&gt;&lt;subtitle&gt;${text}&lt;/subtitle&gt;&lt;text type="copy"&gt;${text}&lt;/text&gt;&lt;/item&gt;`
        }).join('');

        return header + body + footer;
    }
}

class App {
    constructor() {
        this.dataPath = Alfred.dataPath;
        this.configPath = `${this.dataPath}/config.json`;

        if (!this.hasConfig()) {
            this.initConfig();
        }
    }

    hasConfig() {
        return $.NSFileManager.defaultManager.fileExistsAtPath(this.configPath);
    }

    initConfig() {
        var fileManager = $.NSFileManager.defaultManager;
        var config = JSON.stringify([{"format":"${url}","title":"URL"},{"format":"${title}","title":"Title"},{"format":"&lt;a href=\"${url}\"&gt;${title}&lt;/a&gt;","title":"Anchor"},{"format":"[${title}](${url})","title":"Markdown"}]);
        var error = $();

        fileManager.createDirectoryAtPathWithIntermediateDirectoriesAttributesError(this.dataPath, true, NIL, error);
        fileManager.createFileAtPathContentsAttributes(this.configPath, config, NIL);
    }

    get data() {
        var processes = Application('System Events').processes;
        var frontmost = processes.whose({frontmost: {'=': true}}).name().toString();

        if (frontmost === 'Google Chrome') {
            return new Chrome().currentTabInfo;
        } else if (frontmost === 'Safari') {
            return new Safari().currentTabInfo;
        } else {
            if (processes.byName('Google Chrome').exists()) {
                return new Chrome().currentTabInfo;
            } else if (processes.byName('Safari').exists()) {
                return new Safari().currentTabInfo;
            }
        }
    }

    get templates() {
        return JSON.parse($.NSString.stringWithContentsOfFile(this.configPath).js) || [];
    }

    run() {
        var data = this.data;
        var templates = this.templates;

        if (!data || !templates) {
            return;
        }

        return Alfred.generateOutput(data, templates);
    }
}

function run() {
    return new App().run();
}
</string>
				<key>title</key>
				<string>Copy Browser's URL</string>
				<key>type</key>
				<integer>7</integer>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>BD0036A7-F666-46BA-9A05-CEBF20F9343C</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>autopaste</key>
				<true/>
				<key>clipboardtext</key>
				<string>{query}</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.clipboard</string>
			<key>uid</key>
			<string>45C33B5C-4EC4-4328-9A66-D2E86C40AE95</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
	</array>
	<key>readme</key>
	<string></string>
	<key>uidata</key>
	<dict>
		<key>45C33B5C-4EC4-4328-9A66-D2E86C40AE95</key>
		<dict>
			<key>ypos</key>
			<real>10</real>
		</dict>
		<key>BD0036A7-F666-46BA-9A05-CEBF20F9343C</key>
		<dict>
			<key>ypos</key>
			<real>10</real>
		</dict>
	</dict>
	<key>webaddress</key>
	<string>https://github.com/fallroot/copy-url-for-alfred</string>
</dict>
</plist>
